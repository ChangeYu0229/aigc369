"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimLastNewline = exports.Renderer = exports.getAlignStyle = exports.ObjType = exports.IframeType = exports.Color = exports.getCodeLanguage = exports.CodeLanguage = exports.StyleAlign = exports.BlockType = void 0;
var BlockType;
(function (BlockType) {
    BlockType[BlockType["Page"] = 1] = "Page";
    BlockType[BlockType["Text"] = 2] = "Text";
    BlockType[BlockType["Heading1"] = 3] = "Heading1";
    BlockType[BlockType["Heading2"] = 4] = "Heading2";
    BlockType[BlockType["Heading3"] = 5] = "Heading3";
    BlockType[BlockType["Heading4"] = 6] = "Heading4";
    BlockType[BlockType["Heading5"] = 7] = "Heading5";
    BlockType[BlockType["Heading6"] = 8] = "Heading6";
    BlockType[BlockType["Heading7"] = 9] = "Heading7";
    BlockType[BlockType["Heading8"] = 10] = "Heading8";
    BlockType[BlockType["Heading9"] = 11] = "Heading9";
    BlockType[BlockType["Bullet"] = 12] = "Bullet";
    BlockType[BlockType["Ordered"] = 13] = "Ordered";
    BlockType[BlockType["Code"] = 14] = "Code";
    BlockType[BlockType["Quote"] = 15] = "Quote";
    // 代办事项
    BlockType[BlockType["TodoList"] = 17] = "TodoList";
    // 多维表格
    BlockType[BlockType["Bitable"] = 18] = "Bitable";
    // 高亮块 Block
    BlockType[BlockType["Callout"] = 19] = "Callout";
    // 群聊卡片
    BlockType[BlockType["ChatCard"] = 20] = "ChatCard";
    // 流程图/UML Block
    BlockType[BlockType["Diagram"] = 21] = "Diagram";
    BlockType[BlockType["Divider"] = 22] = "Divider";
    BlockType[BlockType["File"] = 23] = "File";
    // 分栏 Block
    BlockType[BlockType["Grid"] = 24] = "Grid";
    // 分栏列 Block
    BlockType[BlockType["GridColumn"] = 25] = "GridColumn";
    BlockType[BlockType["Iframe"] = 26] = "Iframe";
    BlockType[BlockType["Image"] = 27] = "Image";
    BlockType[BlockType["Widget"] = 28] = "Widget";
    BlockType[BlockType["MindNote"] = 29] = "MindNote";
    BlockType[BlockType["Sheet"] = 30] = "Sheet";
    BlockType[BlockType["Table"] = 31] = "Table";
    BlockType[BlockType["TableCell"] = 32] = "TableCell";
    BlockType[BlockType["View"] = 33] = "View";
    BlockType[BlockType["QuoteContainer"] = 34] = "QuoteContainer";
})(BlockType || (exports.BlockType = BlockType = {}));
var StyleAlign;
(function (StyleAlign) {
    StyleAlign[StyleAlign["Left"] = 1] = "Left";
    StyleAlign[StyleAlign["Center"] = 2] = "Center";
    StyleAlign[StyleAlign["Right"] = 3] = "Right";
})(StyleAlign || (exports.StyleAlign = StyleAlign = {}));
var CodeLanguage;
(function (CodeLanguage) {
    CodeLanguage[CodeLanguage["PlainText"] = 1] = "PlainText";
    CodeLanguage[CodeLanguage["ABAP"] = 2] = "ABAP";
    CodeLanguage[CodeLanguage["Ada"] = 3] = "Ada";
    CodeLanguage[CodeLanguage["Apache"] = 4] = "Apache";
    CodeLanguage[CodeLanguage["Apex"] = 5] = "Apex";
    CodeLanguage[CodeLanguage["AssemblyLanguage"] = 6] = "AssemblyLanguage";
    CodeLanguage[CodeLanguage["Bash"] = 7] = "Bash";
    CodeLanguage[CodeLanguage["CSharp"] = 8] = "CSharp";
    CodeLanguage[CodeLanguage["CPlusPlus"] = 9] = "CPlusPlus";
    CodeLanguage[CodeLanguage["C"] = 10] = "C";
    CodeLanguage[CodeLanguage["COBOL"] = 11] = "COBOL";
    CodeLanguage[CodeLanguage["CSS"] = 12] = "CSS";
    CodeLanguage[CodeLanguage["CoffeeScript"] = 13] = "CoffeeScript";
    CodeLanguage[CodeLanguage["D"] = 14] = "D";
    CodeLanguage[CodeLanguage["Dart"] = 15] = "Dart";
    CodeLanguage[CodeLanguage["Delphi"] = 16] = "Delphi";
    CodeLanguage[CodeLanguage["Django"] = 17] = "Django";
    CodeLanguage[CodeLanguage["Dockerfile"] = 18] = "Dockerfile";
    CodeLanguage[CodeLanguage["Erlang"] = 19] = "Erlang";
    CodeLanguage[CodeLanguage["Fortran"] = 20] = "Fortran";
    CodeLanguage[CodeLanguage["FoxPro"] = 21] = "FoxPro";
    CodeLanguage[CodeLanguage["Go"] = 22] = "Go";
    CodeLanguage[CodeLanguage["Groovy"] = 23] = "Groovy";
    CodeLanguage[CodeLanguage["HTML"] = 24] = "HTML";
    CodeLanguage[CodeLanguage["HTMLBars"] = 25] = "HTMLBars";
    CodeLanguage[CodeLanguage["HTTP"] = 26] = "HTTP";
    CodeLanguage[CodeLanguage["Haskell"] = 27] = "Haskell";
    CodeLanguage[CodeLanguage["JSON"] = 28] = "JSON";
    CodeLanguage[CodeLanguage["Java"] = 29] = "Java";
    CodeLanguage[CodeLanguage["JavaScript"] = 30] = "JavaScript";
    CodeLanguage[CodeLanguage["Julia"] = 31] = "Julia";
    CodeLanguage[CodeLanguage["Kotlin"] = 32] = "Kotlin";
    CodeLanguage[CodeLanguage["LateX"] = 33] = "LateX";
    CodeLanguage[CodeLanguage["Lisp"] = 34] = "Lisp";
    CodeLanguage[CodeLanguage["Logo"] = 35] = "Logo";
    CodeLanguage[CodeLanguage["Lua"] = 36] = "Lua";
    CodeLanguage[CodeLanguage["MATLAB"] = 37] = "MATLAB";
    CodeLanguage[CodeLanguage["Makefile"] = 38] = "Makefile";
    CodeLanguage[CodeLanguage["Markdown"] = 39] = "Markdown";
    CodeLanguage[CodeLanguage["Nginx"] = 40] = "Nginx";
    CodeLanguage[CodeLanguage["ObjectiveC"] = 41] = "ObjectiveC";
    CodeLanguage[CodeLanguage["OpenEdgeABL"] = 42] = "OpenEdgeABL";
    CodeLanguage[CodeLanguage["PHP"] = 43] = "PHP";
    CodeLanguage[CodeLanguage["Perl"] = 44] = "Perl";
    CodeLanguage[CodeLanguage["PostScript"] = 45] = "PostScript";
    CodeLanguage[CodeLanguage["PowerShell"] = 46] = "PowerShell";
    CodeLanguage[CodeLanguage["Prolog"] = 47] = "Prolog";
    CodeLanguage[CodeLanguage["ProtoBuf"] = 48] = "ProtoBuf";
    CodeLanguage[CodeLanguage["Python"] = 49] = "Python";
    CodeLanguage[CodeLanguage["R"] = 50] = "R";
    CodeLanguage[CodeLanguage["RPG"] = 51] = "RPG";
    CodeLanguage[CodeLanguage["Ruby"] = 52] = "Ruby";
    CodeLanguage[CodeLanguage["Rust"] = 53] = "Rust";
    CodeLanguage[CodeLanguage["SAS"] = 54] = "SAS";
    CodeLanguage[CodeLanguage["SCSS"] = 55] = "SCSS";
    CodeLanguage[CodeLanguage["SQL"] = 56] = "SQL";
    CodeLanguage[CodeLanguage["Scala"] = 57] = "Scala";
    CodeLanguage[CodeLanguage["Scheme"] = 58] = "Scheme";
    CodeLanguage[CodeLanguage["Scratch"] = 59] = "Scratch";
    CodeLanguage[CodeLanguage["Shell"] = 60] = "Shell";
    CodeLanguage[CodeLanguage["Swift"] = 61] = "Swift";
    CodeLanguage[CodeLanguage["Thrift"] = 62] = "Thrift";
    CodeLanguage[CodeLanguage["TypeScript"] = 63] = "TypeScript";
    CodeLanguage[CodeLanguage["VBScript"] = 64] = "VBScript";
    CodeLanguage[CodeLanguage["VisualBasic"] = 65] = "VisualBasic";
    CodeLanguage[CodeLanguage["XML"] = 66] = "XML";
    CodeLanguage[CodeLanguage["YAML"] = 67] = "YAML";
    CodeLanguage[CodeLanguage["CMake"] = 68] = "CMake";
    CodeLanguage[CodeLanguage["Diff"] = 69] = "Diff";
    CodeLanguage[CodeLanguage["Gherkin"] = 70] = "Gherkin";
    CodeLanguage[CodeLanguage["GraphQL"] = 71] = "GraphQL";
    CodeLanguage[CodeLanguage["OpenGLShadingLanguage"] = 72] = "OpenGLShadingLanguage";
    CodeLanguage[CodeLanguage["Properties"] = 73] = "Properties";
    CodeLanguage[CodeLanguage["Solidity"] = 74] = "Solidity";
    CodeLanguage[CodeLanguage["TOML"] = 75] = "TOML";
})(CodeLanguage || (exports.CodeLanguage = CodeLanguage = {}));
/**
 * Return code language by enum
 * @param code
 * @returns
 */
const getCodeLanguage = (code) => {
    var _a;
    switch (code) {
        case CodeLanguage.PlainText:
            return 'text';
        case CodeLanguage.AssemblyLanguage:
            return 'assembly';
        case CodeLanguage.CPlusPlus:
            return 'cpp';
        case CodeLanguage.CoffeeScript:
            return 'coffee';
        case CodeLanguage.Dockerfile:
            return 'docker';
        case CodeLanguage.FoxPro:
            return 'foxpro';
        case CodeLanguage.TypeScript:
            return 'ts';
        case CodeLanguage.JavaScript:
            return 'js';
        case CodeLanguage.Rust:
            return 'rs';
        case CodeLanguage.Python:
            return 'py';
        case CodeLanguage.Ruby:
            return 'rb';
        case CodeLanguage.Markdown:
            return 'md';
        default:
            return ((_a = CodeLanguage[code]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '';
    }
};
exports.getCodeLanguage = getCodeLanguage;
var Color;
(function (Color) {
    Color[Color["LightPink"] = 1] = "LightPink";
    Color[Color["LightOrange"] = 2] = "LightOrange";
    Color[Color["LightYellow"] = 3] = "LightYellow";
    Color[Color["LightGreen"] = 4] = "LightGreen";
    Color[Color["LightBlue"] = 5] = "LightBlue";
    Color[Color["LightPurple"] = 6] = "LightPurple";
    Color[Color["LightGray"] = 7] = "LightGray";
    Color[Color["DarkPink"] = 8] = "DarkPink";
    Color[Color["DarkOrange"] = 9] = "DarkOrange";
    Color[Color["DarkYellow"] = 10] = "DarkYellow";
    Color[Color["DarkGreen"] = 11] = "DarkGreen";
    Color[Color["DarkBlue"] = 12] = "DarkBlue";
    Color[Color["DarkPurple"] = 13] = "DarkPurple";
    Color[Color["DarkGray"] = 14] = "DarkGray";
    Color[Color["DarkSilverGray"] = 15] = "DarkSilverGray";
})(Color || (exports.Color = Color = {}));
var IframeType;
(function (IframeType) {
    IframeType[IframeType["Bilibili"] = 1] = "Bilibili";
    IframeType[IframeType["Xigua"] = 2] = "Xigua";
    IframeType[IframeType["Youku"] = 3] = "Youku";
    IframeType[IframeType["Airtable"] = 4] = "Airtable";
    IframeType[IframeType["BaiduMap"] = 5] = "BaiduMap";
    IframeType[IframeType["GaodeMap"] = 6] = "GaodeMap";
    IframeType[IframeType["Figma"] = 8] = "Figma";
    IframeType[IframeType["Modao"] = 9] = "Modao";
    IframeType[IframeType["Canva"] = 10] = "Canva";
    IframeType[IframeType["CodePen"] = 11] = "CodePen";
    IframeType[IframeType["FeishuWenjuan"] = 12] = "FeishuWenjuan";
    IframeType[IframeType["Jinshuju"] = 13] = "Jinshuju";
})(IframeType || (exports.IframeType = IframeType = {}));
var ObjType;
(function (ObjType) {
    ObjType[ObjType["Doc"] = 1] = "Doc";
    ObjType[ObjType["Sheet"] = 3] = "Sheet";
    ObjType[ObjType["Bitable"] = 8] = "Bitable";
    ObjType[ObjType["MindNote"] = 11] = "MindNote";
    ObjType[ObjType["File"] = 12] = "File";
    ObjType[ObjType["Slide"] = 15] = "Slide";
    ObjType[ObjType["Wiki"] = 16] = "Wiki";
    ObjType[ObjType["Docx"] = 22] = "Docx";
})(ObjType || (exports.ObjType = ObjType = {}));
function getAlignStyle(align) {
    switch (align) {
        case StyleAlign.Left:
            return 'left';
        case StyleAlign.Center:
            return 'center';
        case StyleAlign.Right:
            return 'right';
        default:
            return 'left';
    }
}
exports.getAlignStyle = getAlignStyle;
class Renderer {
    constructor(doc, options = {}) {
        var _a, _b;
        this.blockMap = {};
        this.output_unsupported = false;
        const { debug = false, output_unsupported } = options;
        this.documentId = ((_a = doc === null || doc === void 0 ? void 0 : doc.document) === null || _a === void 0 ? void 0 : _a.document_id) || '';
        this.imageTokens = [];
        (_b = doc === null || doc === void 0 ? void 0 : doc.blocks) === null || _b === void 0 ? void 0 : _b.forEach((block) => {
            this.blockMap[block === null || block === void 0 ? void 0 : block.block_id] = block;
        });
        this.debug = debug;
        this.output_unsupported = output_unsupported;
    }
    /**
     * Parse Feishu doc to new format
     * @returns Text of new format content.
     */
    parse() {
        const entryBlock = this.blockMap[this.documentId];
        return this.parseBlock(entryBlock, 0);
    }
    parseBlock(block, indent) {
        throw new Error('Not implemented');
    }
}
exports.Renderer = Renderer;
/**
 * 去掉末尾 1 个换行
 * @param str
 * @returns
 */
const trimLastNewline = (str) => {
    return str.replace(/\n$/, '');
};
exports.trimLastNewline = trimLastNewline;
//# sourceMappingURL=types.js.map