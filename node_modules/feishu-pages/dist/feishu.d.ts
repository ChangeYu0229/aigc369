import 'dotenv/config';
export declare const OUTPUT_DIR: string;
export declare const DOCS_DIR: string;
export declare const BASE_URL: string;
export declare const ROOT_NODE_TOKEN: string;
export declare const CACHE_DIR: string;
declare const feishuConfig: {
    endpoint: string;
    /**
     * App Id of Feishu App
     *
     * env: `FEISHU_APP_ID`
     */
    appId: string;
    /**
     * App Secret of Feishu App
     *
     * env: `FEISHU_APP_SECRET`
     */
    appSecret: string;
    /**
     * Tenant Access Token of Feishu App
     *
     * env: `FEISHU_TENANT_ACCESS_TOKEN`
     *
     * https://open.feishu.cn/document/faq/trouble-shooting/how-to-choose-which-type-of-token-to-use
     */
    tenantAccessToken: any;
    /**
     * Wiki Space Id of Feishu App
     *
     * env: `FEISHU_SPACE_ID`
     */
    spaceId: string;
    logLevel: string;
};
declare const checkEnv: () => void;
/**
 * 获取 tenantAccessToken
 *
 * Max-Age: 2 hours
 *
 * https://open.feishu.cn/document/server-docs/authentication-management/access-token/tenant_access_token
 * @returns
 */
export declare const fetchTenantAccessToken: () => Promise<void>;
/**
 * Mask part of token as ****
 * @param token
 * @returns
 */
export declare const maskToken: (token: any) => string;
/**
 * Feishu Rate Limit:
 *
 * - 100 times/min
 * - 5 times/s in Max
 */
export declare const requestWait: (ms?: number) => Promise<void>;
/**
 * 带有全局 RateLimit 的 Feishu 网络请求方式
 * @param fn
 * @param payload
 * @param options
 * @returns
 */
export declare const feishuFetch: (method: any, path: any, payload: any) => Promise<any>;
/**
 * Download Feishu File into a Local path
 *
 * If download failed, return null
 *
 * @param fileToken
 * @param localPath
 * @returns
 */
export declare const feishuDownload: (fileToken: string, localPath: string) => Promise<string>;
/**
 * Request Feishu List API with iterator
 *
 * @param method
 * @param path
 * @param payload
 * @param options
 * @returns
 */
export declare const feishuFetchWithIterator: (method: string, path: string, payload?: Record<string, any>) => Promise<any[]>;
export interface Doc {
    title: string;
    meta?: Record<string, any>;
    node_token: string;
    parent_node_token?: string;
    depth: number;
    obj_create_time?: string;
    obj_edit_time?: string;
    obj_token?: string;
    children: Doc[];
    has_child?: boolean;
}
export { checkEnv, feishuConfig };
