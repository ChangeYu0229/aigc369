"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAllDocs = void 0;
const feishu_1 = require("./feishu");
/**
 * 获取某个空间下的所有文档列表
 *
 * @param {string} spaceId 空间 ID
 */
const fetchAllDocs = (spaceId, depth, parent_node_token) => __awaiter(void 0, void 0, void 0, function* () {
    if (!depth) {
        depth = 0;
    }
    const prefix = '|__' + '___'.repeat(depth) + ' ';
    let items = yield (0, feishu_1.feishuFetchWithIterator)('GET', `/open-apis/wiki/v2/spaces/${spaceId}/nodes`, {
        parent_node_token,
        page_size: 50,
    });
    const docs = [];
    items
        .filter((item) => item.obj_type == 'doc' || item.obj_type == 'docx')
        .forEach((item) => {
        const doc = {
            depth: depth,
            title: item.title,
            node_token: item.node_token,
            parent_node_token: parent_node_token,
            obj_create_time: item.obj_create_time,
            obj_edit_time: item.obj_edit_time,
            obj_token: item.obj_token,
            children: [],
            has_child: item.has_child,
        };
        docs.push(doc);
    });
    console.info(prefix + 'node:', parent_node_token || 'root', docs.length > 0 ? `${docs.length} docs` : '');
    for (const doc of docs) {
        doc.children = yield (0, exports.fetchAllDocs)(spaceId, depth + 1, doc.node_token);
    }
    return docs;
});
exports.fetchAllDocs = fetchAllDocs;
