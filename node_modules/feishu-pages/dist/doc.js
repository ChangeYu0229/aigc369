"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFileMeta = exports.fetchDocBody = void 0;
const feishu_docx_1 = require("feishu-docx");
const feishu_1 = require("./feishu");
/**
 * Fetch doc content
 * https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/raw_content
 * @param document_id doc.obj_token
 * @returns
 */
const fetchDocBody = (document_id) => __awaiter(void 0, void 0, void 0, function* () {
    console.info('Fetching doc: ', document_id, '...');
    const doc = {
        document: {
            document_id,
        },
        blocks: [],
    };
    doc.blocks = yield (0, feishu_1.feishuFetchWithIterator)('GET', `/open-apis/docx/v1/documents/${document_id}/blocks`, {
        page_size: 500,
        document_revision_id: -1,
    });
    const render = new feishu_docx_1.MarkdownRenderer(doc);
    const content = render.parse();
    const fileTokens = render.fileTokens;
    const meta = render.meta;
    return {
        content,
        meta,
        fileTokens,
    };
});
exports.fetchDocBody = fetchDocBody;
/**
 * Generate a Markdown doc meta for describe sidebar info.
 * @param doc
 * @param urlPath
 * @param position
 * @returns
 */
const generateFileMeta = (doc, urlPath, position) => {
    const meta = {
        title: doc.title,
        slug: urlPath,
        sidebar_position: position,
    };
    let output = `---\n`;
    for (const key in meta) {
        const val = meta[key];
        if (val === null || val === undefined) {
            continue;
        }
        output += `${key}: ${val}\n`;
    }
    output += `---\n`;
    return output;
};
exports.generateFileMeta = generateFileMeta;
