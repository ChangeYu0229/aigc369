"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.feishuConfig = exports.checkEnv = exports.feishuFetchWithIterator = exports.feishuDownload = exports.feishuFetch = exports.requestWait = exports.maskToken = exports.fetchTenantAccessToken = exports.CACHE_DIR = exports.ROOT_NODE_TOKEN = exports.BASE_URL = exports.DOCS_DIR = exports.OUTPUT_DIR = void 0;
// node-sdk 使用说明：https://github.com/larksuite/node-sdk/blob/main/README.zh.md
const node_sdk_1 = require("@larksuiteoapi/node-sdk");
const axios_1 = __importDefault(require("axios"));
require("dotenv/config");
const fs_1 = __importDefault(require("fs"));
const mime_types_1 = __importDefault(require("mime-types"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
exports.OUTPUT_DIR = path_1.default.resolve(process.env.OUTPUT_DIR || './dist');
exports.DOCS_DIR = path_1.default.join(exports.OUTPUT_DIR, 'docs');
let baseUrl = process.env.BASE_URL || process.env.URL_PREFIX || '/';
if (!baseUrl.endsWith('/')) {
    baseUrl += '/';
}
exports.BASE_URL = baseUrl;
exports.ROOT_NODE_TOKEN = process.env.ROOT_NODE_TOKEN || '';
exports.CACHE_DIR = path_1.default.resolve(process.env.CACHE_DIR || path_1.default.join(exports.OUTPUT_DIR, '.cache'));
const feishuConfig = {
    endpoint: process.env.FEISHU_ENDPOINT || 'https://open.feishu.cn',
    /**
     * App Id of Feishu App
     *
     * env: `FEISHU_APP_ID`
     */
    appId: process.env.FEISHU_APP_ID,
    /**
     * App Secret of Feishu App
     *
     * env: `FEISHU_APP_SECRET`
     */
    appSecret: process.env.FEISHU_APP_SECRET,
    /**
     * Tenant Access Token of Feishu App
     *
     * env: `FEISHU_TENANT_ACCESS_TOKEN`
     *
     * https://open.feishu.cn/document/faq/trouble-shooting/how-to-choose-which-type-of-token-to-use
     */
    tenantAccessToken: null,
    /**
     * Wiki Space Id of Feishu App
     *
     * env: `FEISHU_SPACE_ID`
     */
    spaceId: process.env.FEISHU_SPACE_ID,
    logLevel: process.env.FEISHU_LOG_LEVEL || '2',
};
exports.feishuConfig = feishuConfig;
const checkEnv = () => {
    if (!feishuConfig.appId) {
        throw new Error('FEISHU_APP_ID is required');
    }
    if (!feishuConfig.appSecret) {
        throw new Error('FEISHU_APP_SECRET is required');
    }
    if (!feishuConfig.spaceId) {
        throw new Error('FEISHU_SPACE_ID is required');
    }
};
exports.checkEnv = checkEnv;
checkEnv();
const feishuClient = new node_sdk_1.Client({
    appId: feishuConfig.appId,
    appSecret: feishuConfig.appSecret,
    loggerLevel: feishuConfig.logLevel,
    disableTokenCache: true,
});
/**
 * 获取 tenantAccessToken
 *
 * Max-Age: 2 hours
 *
 * https://open.feishu.cn/document/server-docs/authentication-management/access-token/tenant_access_token
 * @returns
 */
const fetchTenantAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
    console.log('Fetching tenantAccessToken...');
    const res = yield feishuClient.auth.tenantAccessToken.internal({
        data: {
            app_id: feishuConfig.appId,
            app_secret: feishuConfig.appSecret,
        },
    });
    const access_token = (res === null || res === void 0 ? void 0 : res.tenant_access_token) || '';
    console.info('TENANT_ACCESS_TOKEN:', (0, exports.maskToken)(access_token));
    feishuConfig.tenantAccessToken = access_token;
});
exports.fetchTenantAccessToken = fetchTenantAccessToken;
/**
 * Mask part of token as ****
 * @param token
 * @returns
 */
const maskToken = (token) => {
    const len = token.length;
    const mashLen = len * 0.6;
    return (token.substring(0, len - mashLen + 5) +
        '*'.repeat(mashLen) +
        token.substring(len - 5));
};
exports.maskToken = maskToken;
const RATE_LIMITS = {};
/**
 * Feishu Rate Limit:
 *
 * - 100 times/min
 * - 5 times/s in Max
 */
const requestWait = (ms) => __awaiter(void 0, void 0, void 0, function* () {
    ms = ms || 0;
    const minuteLockKey = new Date().getMinutes();
    if (!RATE_LIMITS[minuteLockKey]) {
        RATE_LIMITS[minuteLockKey] = 0;
    }
    // If overload 100 times/min, wait 1 minute
    if (RATE_LIMITS[minuteLockKey] >= 100) {
        console.warn('[RATE LIMIT] Overload request 100 times/min, wait 1 minute...');
        yield yield new Promise((resolve) => setTimeout(resolve, 60 * 1000));
        RATE_LIMITS[minuteLockKey] = 0;
    }
    yield new Promise((resolve) => setTimeout(resolve, ms));
    RATE_LIMITS[minuteLockKey] += 1;
});
exports.requestWait = requestWait;
axios_1.default.interceptors.response.use((response) => {
    return response;
}, (error) => __awaiter(void 0, void 0, void 0, function* () {
    const { headers, data } = error.response;
    // Rate Limit code: 99991400, delay to retry
    if ((data === null || data === void 0 ? void 0 : data.code) === 99991400) {
        const rateLimitResetSeconds = headers['x-ogw-ratelimit-reset'];
        console.warn('[RATE LIMIT]', data.code, data.msg, `delay ${rateLimitResetSeconds}s to retry...`);
        // Delay to retry
        yield (0, exports.requestWait)(rateLimitResetSeconds * 1000);
        return yield axios_1.default.request(error.config);
    }
    throw error;
}));
/**
 * 带有全局 RateLimit 的 Feishu 网络请求方式
 * @param fn
 * @param payload
 * @param options
 * @returns
 */
const feishuFetch = (method, path, payload) => __awaiter(void 0, void 0, void 0, function* () {
    const authorization = `Bearer ${feishuConfig.tenantAccessToken}`;
    const headers = {
        Authorization: authorization,
        'Content-Type': 'application/json; charset=utf-8',
        'User-Agent': 'feishu-pages',
    };
    const url = `${feishuConfig.endpoint}${path}`;
    const { code, data, msg } = yield axios_1.default
        .request({
        method,
        url,
        params: payload,
        headers,
    })
        .then((res) => res.data);
    if (code !== 0) {
        console.warn('feishuFetch code:', code, 'msg:', msg);
        return null;
    }
    return data;
});
exports.feishuFetch = feishuFetch;
/**
 * Download Feishu File into a Local path
 *
 * If download failed, return null
 *
 * @param fileToken
 * @param localPath
 * @returns
 */
const feishuDownload = (fileToken, localPath) => __awaiter(void 0, void 0, void 0, function* () {
    const cacheFilePath = path_1.default.join(exports.CACHE_DIR, fileToken);
    const cacheFileMetaPath = path_1.default.join(exports.CACHE_DIR, `${fileToken}.headers.json`);
    fs_1.default.mkdirSync(exports.CACHE_DIR, { recursive: true });
    let res = {};
    if (fs_1.default.existsSync(cacheFilePath) && fs_1.default.existsSync(cacheFileMetaPath)) {
        res.data = fs_1.default.readFileSync(cacheFilePath);
        res.headers = JSON.parse(fs_1.default.readFileSync(cacheFileMetaPath, 'utf-8'));
        console.info(' -> Cache hit:', fileToken);
    }
    else {
        console.info('Download file', fileToken, '...');
        res = yield axios_1.default
            .get(`${feishuConfig.endpoint}/open-apis/drive/v1/medias/${fileToken}/download`, {
            responseType: 'arraybuffer',
            headers: {
                Authorization: `Bearer ${feishuConfig.tenantAccessToken}`,
                'User-Agent': 'feishu-pages',
            },
        })
            .then((res) => {
            // Write cache info
            fs_1.default.writeFileSync(cacheFilePath, res.data);
            fs_1.default.writeFileSync(cacheFileMetaPath, JSON.stringify(res.headers));
            return res;
        })
            .catch((err) => {
            const { message } = err;
            console.error(' -> Failed to download image:', fileToken, message);
        });
    }
    if (!res) {
        return null;
    }
    if (res.data) {
        let extension = mime_types_1.default.extension(res.headers['content-type']);
        console.info(' =>', res.headers['content-type'], (0, utils_1.humanizeFileSize)(res.data.length));
        if (extension) {
            localPath = localPath + '.' + extension;
        }
        const dir = path_1.default.dirname(localPath);
        fs_1.default.mkdirSync(dir, { recursive: true });
        console.info(' -> Writing file:', localPath);
        fs_1.default.writeFileSync(localPath, res.data);
    }
    return localPath;
});
exports.feishuDownload = feishuDownload;
/**
 * Request Feishu List API with iterator
 *
 * @param method
 * @param path
 * @param payload
 * @param options
 * @returns
 */
const feishuFetchWithIterator = (method, path, payload = {}) => __awaiter(void 0, void 0, void 0, function* () {
    let pageToken = '';
    let hasMore = true;
    let results = [];
    while (hasMore) {
        const data = yield (0, exports.feishuFetch)(method, path, Object.assign(Object.assign({}, payload), { page_token: pageToken }));
        if (data.items) {
            results = results.concat(data.items);
        }
        hasMore = data.has_more;
        pageToken = data.page_token;
    }
    return results;
});
exports.feishuFetchWithIterator = feishuFetchWithIterator;
